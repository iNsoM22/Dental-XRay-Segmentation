import { useImagePrediction } from "@/context/ImagePredictionContext";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { useEffect, useState, useCallback } from "react";
import { getAnalysis } from "@/services/DBService";
import { icons } from "@/assets/assets";
import { askModel, Question } from "@/lib/gemini";
import Markdown from "react-markdown";
import Loader from "./loader";
import { Button } from "./ui/button";
import { toastInfo } from "@/lib/toaster";

const AnalysisContainer = () => {
  const { predictedImageURL, fid } = useImagePrediction();
  const [rawFile, setRawFile] = useState<Question[] | null>(null);
  const [analysisText, setAnalysisText] = useState("");
  const [showRawFile, setShowRawFile] = useState(false);
  const [loading, setLoading] = useState(false);

  // Fetch analysis from the server when `fid` is available.
  const fetchAnalysis = useCallback(async () => {
    if (!fid) return;
    setLoading(true);
    try {
      const response = await getAnalysis(fid);
      console.log(response);
      if (response) {
        setRawFile(response);
      }
    } catch (error) {
      console.error("Error fetching analysis:", error);
    } finally {
      setLoading(false);
    }
  }, [fid, predictedImageURL]);

  // Call LLM (askModel) when `rawFile` is updated.
  const generateAnalysisText = useCallback(async () => {
    if (!rawFile) return;
    try {
      await askModel(setAnalysisText, rawFile);
    } catch (error) {
      console.error("Error generating analysis:", error);
    }
  }, [rawFile]);

  // Fetch Analysis when fid is available
  useEffect(() => {
    fetchAnalysis();
  }, [fetchAnalysis]);

  // Generate text analysis when rawFile is updated
  useEffect(() => {
    generateAnalysisText();
  }, [generateAnalysisText]);

  //  Downloads the analysis JSON as a file.
  const DownloadSelectedFile = () => {
    if (!rawFile) {
      toastInfo("Perform Prediction First to get the Analysis");
      return;
    }

    let fileContent, fileType, fileExtension, fileName;

    if (showRawFile) {
      fileContent = JSON.stringify(rawFile, null, 2);
      fileType = "application/json";
      fileName = "raw";
      fileExtension = "json";
    } else {
      fileContent = analysisText;
      fileType = "text/plain";
      fileName = "LLM";
      fileExtension = "txt";
    }

    const fileBlob = new Blob([fileContent], { type: fileType });
    const url = URL.createObjectURL(fileBlob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `analysis_${fileName}_${fid}.${fileExtension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <Card className="relative flex flex-col grow p-0 gap-0 lg:grow-0 w-full max-w-[800px] h-[90vh] lg:h-[70vh] max-h-[70vh] section-background mt-5 shadow-2xl border border-gray-200 backdrop-blur-xl overflow-hidden transition-all duration-300 hover:shadow-lg">
      {/* Header */}
      <div className="w-full min-w-fit flex justify-between text-white px-5 h-14 items-center rounded-t-xl shadow-md">
        <label className="flex items-center gap-2 text-sm cursor-pointer">
          <input
            type="checkbox"
            className="accent-blue-500 w-4 h-4"
            checked={showRawFile}
            onChange={(e) => setShowRawFile(e.target.checked)}
          />
          Raw File
        </label>
        <h2 className="text-lg font-semibold tracking-wide">Text Analysis</h2>
        <Button
          onClick={DownloadSelectedFile}
          variant="ghost"
          className="p-2 rounded-lg min-w-fit hover:bg-white/20 transition"
        >
          <img
            src={icons.DownloadDown}
            height={24}
            width={24}
            alt="Download Analysis"
            className="object-contain cursor-pointer"
          />
        </Button>
      </div>

      {/* Content Body (Scrollable) */}
      <div className="flex flex-col grow items-center px-6 py-4 bg-white/90 rounded-md overflow-y-auto w-full scrollbar-thin scrollbar-track-gray-200 scrollbar-thumb-blue-500">
        {!predictedImageURL && (
          <div className="text-lg flex items-center justify-center text-gray-500">
            No Predictions Yet
          </div>
        )}

        {loading ? (
          <Loader />
        ) : showRawFile ? (
          <pre className="text-gray-900 text-left text-sm font-mono whitespace-pre-wrap w-full">
            {rawFile && JSON.stringify(rawFile, null, 2)}
          </pre>
        ) : (
          <span className="text-gray-800 leading-relaxed w-full">
            <Markdown>{analysisText}</Markdown>
          </span>
        )}
      </div>

      {/* Footer */}
      <div className="absolute bottom-0 left-0 w-full py-2 bg-gradient-to-r from-gray-300 to-gray-400 text-center text-xs text-gray-700 tracking-wide">
        Generated by LLM
      </div>
    </Card>
  );
};

export default AnalysisContainer;
